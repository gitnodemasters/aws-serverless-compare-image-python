service: invoke-multi-lambda-api
custom:

  corsStatements:
    origin: '*' # <-- Specify allowed origin. If required, allowed origin can be set to point from webapp deployment URL.
    headers: # <-- Specify allowed headers
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
      - Access-Control-Allow-Headers
      - Access-Control-Allow-Origin
    allowCredentials: false
  lambdaBasicStatements:
    Effect: Allow
    Action: # Gives permission to Lambda in a specific region
      - logs:CreateLogGroup
      - logs:CreateLogStream
      - logs:PutLogEvents
      - s3:*
      - lambda:InvokeFunction
      - lambda:InvokeAsync
    Resource: "*"    
provider:
  name: aws
  runtime: python3.8
  environment:
    REGION: ${file(./src/config.json):REGION}
    STAGE: ${file(./src/config.json):STAGE}
  stage: ${file(./src/config.json):STAGE}
  region: ${file(./src/config.json):REGION}
  iamRoleStatements:
    - ${self:custom.lambdaBasicStatements} 
package:
  exclude:
    - ./**
  include:
    - ./src/**
    # - ./requirements.txt
    - ./src/config.json
functions:
  invokeMultiLambda:
    handler: src/invokeMultiLambda/lambda_function.lambda_handler
    name: ${self:provider.stage}-invokeMultiLambda
    description: Invoke Multi Lambda Function - comparePdfDoc
    timeout: 300
    events:
      - http:
          path: invokeMulti
          method: post
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda    
